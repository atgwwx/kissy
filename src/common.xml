<!--
 各个组件的公用构建文件
 @author yiminghe@gmaill.com
 @refer http://ant.apache.org/manual/Tasks/subant.html
-->
<project name="common.build" xmlns:ac="antlib:net.sf.antcontrib">
    <import file="./config.xml"/>

    <!-- component src dir -->
    <property name="component.work.dir" location="./"/>
    <property name="component.src.dir" location="./src/"/>
    <property name="component.coverage.dir" location="./coverage/src/"/>
    <property name="component.meta.dir" location="./meta/"/>
    <property name="component.assets.dir" location="../assets"/>
    <property name="component.src.dir.tmp" location="./tmp/"/>
    <property name="component.assets.dir.tmp" location="${component.src.dir.tmp}/assets"/>
    <property name="component.src.dir.kmc.tmp" location="./kmc-tmp/"/>
    <property name="component.files" value="**/*.*"/>

    <!-- 需要组件覆盖的属性 -->
    <property name="component.name" value="component.name.need.override"/>
    <basename property="component.basename" file="${component.name}"/>
    <!-- 本 xml 需要的属性 -->
    <property name="component.build.dir" value="${kissy.build.dir}/${component.name}/build"/>
    <property name="build.component.dir" value="${kissy.build.dir}/${component.name}/"/>
    <property name="lib.component.dir" value="${kissy.lib.dir}/${component.name}/"/>
    <property name="component.build.dir.tmp" value="${kissy.build.dir}/${component.name}/tmp/"/>
    <tstamp>
        <format property="timestamp.isoformat" pattern="yyyyMMddHHmmss" locale="en"/>
    </tstamp>

    <target name="jshint" depends="check-src">
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <echo>jshint ${component.src.dir}</echo>
                <exec executable="node" failonerror="true">
                    <arg value="${kissy.dir}/node_modules/jshint/bin/jshint"/>
                    <arg value="${component.src.dir}"/>
                </exec>
            </ac:then>
        </ac:if>
    </target>

    <target name="jscs" depends="check-src">
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <echo>jscs ${component.src.dir}</echo>
                <exec executable="node" failonerror="true">
                    <arg value="${kissy.dir}/node_modules/jscs/bin/jscs"/>
                    <arg value="${component.src.dir}"/>
                    <arg value="-c"/>
                    <arg value="${kissy.dir}/.jscs.json"/>
                    <arg value="-n"/>
                </exec>
            </ac:then>
        </ac:if>
    </target>

    <target name="check-src">
        <condition property="component.src.dir.exists">
            <available file="${component.src.dir}" type="dir"/>
        </condition>
    </target>

    <target name="check-assets">
        <condition property="component.assets.dir.exists">
            <available file="${component.assets.dir}" type="dir"/>
        </condition>
    </target>

    <target name="tpl2mod" depends="check-src">
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <exec executable="node" failonerror="true">
                    <arg value="${kissy.dir}/bin/xtemplate"/>
                    <arg value="-s"/>
                    <arg value="html"/>
                    <arg value="-p"/>
                    <arg value="${component.src.dir.kmc.tmp}"/>
                </exec>
            </ac:then>
        </ac:if>
    </target>

    <target name="create-build.dir">
        <mkdir dir="${component.build.dir}"/>
        <mkdir dir="${component.meta.dir}"/>
        <delete dir="${component.src.dir.tmp}"/>
        <mkdir dir="${component.src.dir.tmp}"/>
        <delete dir="${component.src.dir.kmc.tmp}"/>
        <mkdir dir="${component.src.dir.kmc.tmp}"/>
    </target>

    <target name="before-concat"/>
    <target name="after-concat"/>

    <target name="concat-css" depends="check-assets">
        <ac:if>
            <ac:isset property="component.assets.dir.exists"/>
            <ac:then>
                <copy todir="${component.assets.dir.tmp}">
                    <fileset dir="${component.assets.dir}"
                             excludes="**/*.less,**/*.sass"
                             includes="**/*"/>
                    <mapper type="regexp" from="^(.*)\.(css|js)$" to="\1-debug.\2"/>
                </copy>
                <copy todir="${component.assets.dir.tmp}">
                    <fileset dir="${component.assets.dir}"
                             excludes="**/*.less,**/*.sass"
                             includes="**/*.swf"/>
                </copy>
            </ac:then>
        </ac:if>
    </target>

    <!-- 打包本模块并抽取依赖 -->
    <target name="concat">
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <exec executable="node" failonerror="true">
                    <arg value="${tools.dir}/module-compiler/cli"/>
                    <arg value="--packageName"/>
                    <arg value="${component.name}"/>
                    <arg value="--packageBase"/>
                    <arg value="${component.src.dir.kmc.tmp}/"/>
                    <arg value="--destFile"/>
                    <arg value="${component.src.dir.tmp}/${component.basename}-pkg-debug.js"/>
                    <arg value="--depFile"/>
                    <arg value="${component.meta.dir}/deps.json"/>
                </exec>
            </ac:then>
        </ac:if>
    </target>

    <!-- copy to build dir -->
    <target name="prepare">
        <copy todir="${component.build.dir}">
            <fileset dir="${component.src.dir.tmp}" includes="${component.files}"/>
        </copy>
    </target>

    <target name="copy-src">
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <copy todir="${component.src.dir.kmc.tmp}">
                    <fileset dir="${component.src.dir}"/>
                </copy>
            </ac:then>
        </ac:if>
    </target>

    <!-- 压缩 css -->
    <target name="compress-css">
        <!-- 用 YUICompressor 压缩 CSS -->
        <apply executable="java"
               failonerror="true"
               verbose="true"
               dest="${component.build.dir}">
            <fileset dir="${component.build.dir}"
                     excludes="**/*-min.css" includes="**/*.css"/>
            <arg line="-jar"/>
            <arg path="${yui-compressor}"/>
            <arg line="--charset ${charset}"/>
            <srcfile/>
            <arg line="-o"/>
            <targetfile/>
            <mapper type="regexp" from="^(.*)-debug\.(css|js)$" to="\1.\2"/>
        </apply>
    </target>

    <!-- 压缩 js -->
    <target name="compress-js" depends="create-build.dir">
        <replaceregexp
                match="^((\s*(S|KISSY|logger|LoggerManager)\.(log|error|info|warn|debug)\()|(.*logger\s*=\s*(S|KISSY|LoggerManager)\.getLogger)\s*\().+$"
                replace=""
                flags="g"
                byline="true"
                encoding="${charset}">
            <fileset dir="${component.build.dir}" includes="**/*-debug.js"/>
        </replaceregexp>

        <replaceregexp match="@DEBUG@"
                       replace=""
                       flags="g"
                       byline="true"
                       encoding="${charset}">
            <fileset dir="${component.build.dir}" includes="**/*-debug.js,**/*-debug.css"/>
        </replaceregexp>

        <!-- 用 Closure Compiler 压缩 JS -->
        <apply executable="java"
               verbose="true"
               failonerror="true"
               dest="${component.build.dir}">
            <fileset dir="${component.build.dir}" includes="**/*-debug.js"/>
            <arg line="-jar"/>
            <arg path="${closure-compiler}"/>
            <arg line="--charset ${charset}"/>
            <arg value="--warning_level"/>
            <arg value="QUIET"/>
            <arg value="--js"/>
            <srcfile/>
            <arg value="--js_output_file"/>
            <targetfile/>
            <mapper type="regexp" from="^(.*)-debug\.(css|js)$" to="\1.\2"/>
        </apply>
        <!--
            restore log
        -->
        <move todir="${component.build.dir}">
            <fileset dir="${component.src.dir.tmp}" includes="**/*-debug.js"/>
        </move>
    </target>

    <!-- 对 JS 文件 ASCII 化 -->
    <target name="native2ascii">
        <mkdir dir="${component.build.dir.tmp}"/>
        <move todir="${component.build.dir.tmp}">
            <fileset dir="${component.build.dir}" excludes="**/*-debug.js" includes="**/*.js"/>
        </move>
        <native2ascii encoding="${charset}"
                      src="${component.build.dir.tmp}"
                      dest="${component.build.dir}"
                      includes="**/*.js"/>
        <delete dir="${component.build.dir.tmp}"/>
    </target>

    <!-- 替换版本信息以及给文件加上版权信息 -->
    <target name="copyright">
        <tstamp>
            <format property="stamp.time" pattern="MMM d HH:mm" locale="en,UK"/>
            <format property="build.year" pattern="yyyy"/>
        </tstamp>

        <mkdir dir="${component.build.dir.tmp}"/>
        <move todir="${component.build.dir.tmp}">
            <fileset dir="${component.build.dir}" includes="${js-css.files}"/>
        </move>

        <ac:for param="file">
            <ac:path>
                <fileset dir="${component.build.dir.tmp}"/>
            </ac:path>
            <ac:sequential>
                <ac:var name="copyright.file.name" unset="true"/>
                <basename property="copyright.file.name" file="@{file}"/>
                <concat destfile="@{file}.tmp" encoding="${charset}" outputencoding="${charset}">
                    <header filtering="no" trimleading="yes">/*
                        Copyright ${build.year}, KISSY v${version}
                        MIT Licensed
                        build time: ${stamp.time}
                        */
                    </header>
                    <fileset file="@{file}"/>
                </concat>
                <move file="@{file}.tmp" tofile="@{file}"/>
            </ac:sequential>
        </ac:for>

        <move todir="${component.build.dir}">
            <fileset dir="${component.build.dir.tmp}"/>
        </move>

        <delete dir="${component.build.dir.tmp}"/>
    </target>

    <target name="fill-var">
        <replaceregexp match="@VERSION@"
                       replace="${version}"
                       flags="g"
                       encoding="${charset}"
                       byline="true">
            <fileset dir="${component.build.dir}" includes="${js-css.files}"/>
        </replaceregexp>

        <replaceregexp match="@TIMESTAMP@"
                       replace="${timestamp.isoformat}"
                       flags="g"
                       byline="true"
                       encoding="${charset}">
            <fileset dir="${component.build.dir}" includes="${js-css.files}"/>
        </replaceregexp>
    </target>

    <target name="fix-cr-lf">
        <!--npm publish needs lf-->
        <fixcrlf srcdir="${component.build.dir}"
                 tablength="4"
                 eol="lf"
                 tab="remove"
                 eof="remove"
                 includes="${js-css.files}"
                 encoding="${charset}"/>
    </target>

    <target name="clear">
        <delete dir="${component.src.dir.kmc.tmp}"/>

        <!-- pkg 移到外围 -->
        <move encoding="${charset}" todir="${build.component.dir}/../">
            <fileset dir="${component.build.dir}"
                     includes="**/*-pkg.js,**/*-pkg-debug.js"/>
            <mapper type="regexp" from="(.*)-pkg(.*)" to="\1\2"/>
        </move>

        <move todir="${build.component.dir}/">
            <fileset dir="${component.build.dir}"
                     includes="**/*"/>
        </move>

        <delete dir="${component.build.dir}"/>

        <!-- 空组件文件夹直接删除 -->
        <condition property="build.component.dir.empty">
            <length length="0">
                <fileset dir="${build.component.dir}"/>
            </length>
        </condition>

        <ac:if>
            <ac:isset property="build.component.dir.empty"/>
            <ac:then>
                <delete dir="${build.component.dir}"/>
            </ac:then>
        </ac:if>

        <!-- 空组件文件夹直接删除 -->
        <condition property="component.meta.dir.empty">
            <length length="0">
                <fileset dir="${component.meta.dir}"/>
            </length>
        </condition>

        <ac:if>
            <ac:isset property="component.meta.dir.empty"/>
            <ac:then>
                <delete dir="${component.meta.dir}"/>
            </ac:then>
        </ac:if>

        <delete dir="${component.src.dir.tmp}"/>
    </target>

    <target name="build-node">
        <ac:if>
            <ac:isset property="component.isNode"/>
            <ac:then>
                <ac:if>
                    <available file="${build.component.dir}" type="dir"/>
                    <ac:then>
                        <copy todir="${lib.component.dir}">
                            <fileset dir="${build.component.dir}" includes="**/*-debug.js"/>
                            <mapper type="regexp" from="^(.*)-debug\.(css|js)$" to="\1.\2"/>
                        </copy>
                    </ac:then>
                </ac:if>

                <copy todir="${kissy.lib.dir}">
                    <fileset dir="${kissy.build.dir}" includes="${component.name}-debug.js"/>
                    <mapper type="regexp" from="^(.*)-debug\.(css|js)$" to="\1.\2"/>
                </copy>
            </ac:then>
        </ac:if>
    </target>

    <target name="build" depends="
    check-src,
    create-build.dir,
    jshint,
    jscs,
    before-concat,
    copy-src,
    tpl2mod,
    concat,
    concat-css,
    after-concat,
    prepare,
    compress-js,
    compress-css,
    native2ascii,
    copyright,
    fill-var,
    fix-cr-lf,
    clear,
    build-node">
    </target>

    <target name="build-all" depends="check-src">
        <subant target="build" failonerror="true" inheritall="false">
            <fileset dir="../" includes="**/build.xml" excludes="-/build.xml"/>
        </subant>
        <ac:if>
            <ac:isset property="component.src.dir.exists"/>
            <ac:then>
                <subant target="build" failonerror="true"
                        buildpath="."
                        inheritall="false"/>
            </ac:then>
        </ac:if>
    </target>

    <target name="clean">
        <delete dir="${component.build.dir}"/>
    </target>
</project>